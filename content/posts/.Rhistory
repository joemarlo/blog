"Ones", sum(Ones),
"Twos", sum(Twos),
"Threes", sum(Threes),
"Fours", sum(Fours),
"Fives", sum(Fives),
"Sixes", sum(Sixes),
"3 of a kind", three.of.kind,
"4 of a kind", four.of.kind,
"Full house", full.house,
"Small straight", straight4,
"Large straight", straight5,
"Chance", sum(roll.results),
"YAHTZEE", yahtzee
)
if (verbose) {print(results)}
last.roll <<- roll.results
best.result <- results[2:14, 2] %>% unlist() %>% as.integer() %>% max()
return(best.result)
}
seed.roll <-  c(2, 2, 4, 5, 2)
# results <- lapply(0:5, function(die.to.keep) {
die.to.keep <- 2
#different combinations of the original die to keep and sort them
base.rolls <- combn(seed.roll, die.to.keep, simplify = FALSE) %>% lapply(., sort)
#remove duplicates
base.rolls <- base.rolls[!duplicated(base.rolls)]
#set up data then generate all possible permutations of the new roll
reps <- replicate(5 - die.to.keep, 1:6, simplify = FALSE)
new.perms <- expand.grid(reps) #generate all permutations of new die
#modify structure from DF to list
new.perms <- lapply(1:nrow(new.perms), function(x){new.perms[x,] %>% as.numeric()})
if (die.to.keep > 0) {
new.rolls <- expand.grid(base.rolls, new.perms)
new.rolls <- lapply(1:nrow(new.rolls), function(x) {
new.rolls[x,] %>% unlist() %>% as.vector()
})
} else
new.rolls <- new.perms
max.scores <- mclapply(X = new.rolls,
FUN = calculate.score,
mc.cores = 4L) %>% unlist()
mcreplicate <- function(n, expr, simplify = "array", ...) {
#function parallelizes replicate by imitating mclapply
#this is similar to how replicate imitates lapply
mclapply(integer(n), eval.parent(substitute(function(...) expr)),
simplify = simplify, mc.cores = cpu.cores)
}
seed.roll <-  c(2, 2, 4, 5, 2)
# results <- lapply(0:5, function(die.to.keep) {
die.to.keep <- 2
#different combinations of the original die to keep and sort them
base.rolls <- combn(seed.roll, die.to.keep, simplify = FALSE) %>% lapply(., sort)
#remove duplicates
base.rolls <- base.rolls[!duplicated(base.rolls)]
#set up data then generate all possible permutations of the new roll
reps <- replicate(5 - die.to.keep, 1:6, simplify = FALSE)
new.perms <- expand.grid(reps) #generate all permutations of new die
#modify structure from DF to list
new.perms <- lapply(1:nrow(new.perms), function(x){new.perms[x,] %>% as.numeric()})
#combine the base.roll combinations with the new permutations to generate
#    all possible outcomes
if (die.to.keep > 0) {
new.rolls <- expand.grid(base.rolls, new.perms)
new.rolls <- lapply(1:nrow(new.rolls), function(x) {
new.rolls[x,] %>% unlist() %>% as.vector()
})
} else
new.rolls <- new.perms
#calculate the maximium scores for each possible roll
max.scores <- mclapply(X = new.rolls,
FUN = calculate.score,
mc.cores = 4L) %>% unlist()
library(parallel)
mcreplicate <- function(n, expr, simplify = "array", ...) {
#function parallelizes replicate by imitating mclapply
#this is similar to how replicate imitates lapply
mclapply(integer(n), eval.parent(substitute(function(...) expr)),
simplify = simplify, mc.cores = cpu.cores)
}
seed.roll <-  c(2, 2, 4, 5, 2)
# results <- lapply(0:5, function(die.to.keep) {
die.to.keep <- 2
#different combinations of the original die to keep and sort them
base.rolls <- combn(seed.roll, die.to.keep, simplify = FALSE) %>% lapply(., sort)
#remove duplicates
base.rolls <- base.rolls[!duplicated(base.rolls)]
#set up data then generate all possible permutations of the new roll
reps <- replicate(5 - die.to.keep, 1:6, simplify = FALSE)
new.perms <- expand.grid(reps) #generate all permutations of new die
#modify structure from DF to list
new.perms <- lapply(1:nrow(new.perms), function(x){new.perms[x,] %>% as.numeric()})
#combine the base.roll combinations with the new permutations to generate
#    all possible outcomes
if (die.to.keep > 0) {
new.rolls <- expand.grid(base.rolls, new.perms)
new.rolls <- lapply(1:nrow(new.rolls), function(x) {
new.rolls[x,] %>% unlist() %>% as.vector()
})
} else
new.rolls <- new.perms
#calculate the maximium scores for each possible roll
max.scores <- mclapply(X = new.rolls,
FUN = calculate.score,
mc.cores = 4L) %>% unlist()
if (die.to.keep > 0) {
base.rolls <- rep(base.rolls, length.out = length(new.rolls))
base.rolls <- lapply(base.rolls, function(x) {
paste(x, collapse = "-")
}) %>% unlist() %>% enframe() %>% select(value)
} else
base.rolls <- tibble(rep("Keep no dice", length(new.rolls)))
#convert new rolls to a character string then place in data frame
new.rolls <- lapply(new.rolls, function(x) {paste(x, collapse = "-")}) %>% unlist() %>% enframe()
new.rolls$name <- die.to.keep #label the rows by how many die were kept
max.scores <- max.scores %>% enframe() %>% select(value)
results <- bind_cols(base.rolls, new.rolls, max.scores)
names(results) <- c("Base_roll", "Die_to_keep", "Roll", "Max_score")
results <- results %>% select(Die_to_keep, Base_roll, Roll, Max_score)
results
replicate(5 - die.to.keep, 1:6, simplify = FALSE)
reps
expand.grid(reps)
choose(6, 3)
6*6*6
replicate(5 - die.to.keep, 1:6, simplify = FALSE)
216 *4
reps <- replicate(5 - die.to.keep, 1:6, simplify = FALSE)
new.perms <- expand.grid(reps) #generate all permutations of new die
new.perms
new.perms <- lapply(1:nrow(new.perms), function(x){new.perms[x,] %>% as.numeric()})
new.perms
if (die.to.keep > 0) {
new.rolls <- expand.grid(base.rolls, new.perms)
new.rolls <- lapply(1:nrow(new.rolls), function(x) {
new.rolls[x,] %>% unlist() %>% as.vector()
})
} else
new.rolls <- new.perms
new.rolls
expand.grid(base.rolls, new.perms)
expand.grid(base.rolls, new.perms)
seed.roll <-  c(2, 2, 4, 5, 2)
# results <- lapply(0:5, function(die.to.keep) {
die.to.keep <- 2
#different combinations of the original die to keep and sort them
base.rolls <- combn(seed.roll, die.to.keep, simplify = FALSE) %>% lapply(., sort)
#remove duplicates
base.rolls <- base.rolls[!duplicated(base.rolls)]
#set up data then generate all possible permutations of the new roll
reps <- replicate(5 - die.to.keep, 1:6, simplify = FALSE)
new.perms <- expand.grid(reps) #generate all permutations of new die
#modify structure from DF to list
new.perms <- lapply(1:nrow(new.perms), function(x){new.perms[x,] %>% as.numeric()})
combn
utils::combn
combinat::combn
library(tidyverse)
library(parallel)
seed.roll <-  c(2, 2, 4, 5, 2)
# results <- lapply(0:5, function(die.to.keep) {
die.to.keep <- 2
#different combinations of the original die to keep and sort them
base.rolls <- combn(seed.roll, die.to.keep, simplify = FALSE) %>% lapply(., sort)
#remove duplicates
base.rolls <- base.rolls[!duplicated(base.rolls)]
#set up data then generate all possible permutations of the new roll
reps <- replicate(5 - die.to.keep, 1:6, simplify = FALSE)
new.perms <- expand.grid(reps) #generate all permutations of new die
#modify structure from DF to list
new.perms <- lapply(1:nrow(new.perms), function(x){new.perms[x,] %>% as.numeric()})
expand.grid(base.rolls, new.perms)
nrow(expand.grid(base.rolls, new.perms))
216*4
library(tidyverse)
library(combinat)
library(parallel)
# function to calculate score of a given roll --------------------------
calculate.score <- function(roll.results = NULL, verbose = FALSE) {
#function returns the maximum score for a dice throw
#if no roll is provided (roll.results) then a roll is randomly generated
#verbose argument prints out the score sheet
#roll 5 die if none are provided
if (is.null(roll.results)) {
roll.results <- sample(6, 5, replace = TRUE)
}
#sort results for ease of reading
roll.results <- sort(roll.results)
#grab the number of die per face
Ones <- roll.results[roll.results == 1]
Twos <- roll.results[roll.results == 2]
Threes <- roll.results[roll.results == 3]
Fours <- roll.results[roll.results == 4]
Fives <- roll.results[roll.results == 5]
Sixes <- roll.results[roll.results == 6]
#calculate frequency of each die
counts <- sapply(list(Ones, Twos, Threes, Fours, Fives, Sixes), length)
#find unique number of faces then check for kinds
face.sum <- sum(roll.results)
two.of.kind <-   any(counts == 2) #exactly two of a kind
three.of.kind <- any(counts == 3) * face.sum #exactly three of a kind
four.of.kind <-  any(counts == 4) * face.sum #exactly four of a kind
yahtzee <-       any(counts == 5) * 50 #exactly five of a kind
#full house
full.house <- (two.of.kind & (three.of.kind > 0)) * 25
#calculate if there is a small straight by checking if the die match either 1:4 or 2:5 or 3:6
straight4 <- (all(1:4 %in% roll.results) | all(2:5 %in% roll.results) | all(3:6 %in% roll.results)) * 30
#calculate if there is a large straight by checking if the die match 1:5 or 2:6
straight5 <- (all(1:5 %in% roll.results) | all(2:6 %in% roll.results))  * 40
#results
results <- tribble(
~ Result, ~ Score,
"Roll results", paste(roll.results, collapse = "-"),
"Ones", sum(Ones),
"Twos", sum(Twos),
"Threes", sum(Threes),
"Fours", sum(Fours),
"Fives", sum(Fives),
"Sixes", sum(Sixes),
"3 of a kind", three.of.kind,
"4 of a kind", four.of.kind,
"Full house", full.house,
"Small straight", straight4,
"Large straight", straight5,
"Chance", sum(roll.results),
"YAHTZEE", yahtzee
)
if (verbose) {print(results)}
last.roll <<- roll.results
best.result <- results[2:14, 2] %>% unlist() %>% as.integer() %>% max()
return(best.result)
}
mcreplicate <- function(n, expr, simplify = "array", ...) {
#function parallelizes replicate by imitating mclapply
#this is similar to how replicate imitates lapply
mclapply(integer(n), eval.parent(substitute(function(...) expr)),
simplify = simplify, mc.cores = cpu.cores)
}
seed.roll <-  c(2, 2, 4, 5, 2)
die.to.keep <- 3
#different combinations of the original die to keep and sort them
base.rolls <- combn(seed.roll, die.to.keep, simplify = FALSE) %>% lapply(., sort)
#remove duplicates
base.rolls <- base.rolls[!duplicated(base.rolls)]
base.rolls
rep(base.rolls, length.out = length(new.rolls))
base.rolls
library(tidyverse)
library(combinat)
library(parallel)
# function to calculate score of a given roll --------------------------
calculate.score <- function(roll.results = NULL, verbose = FALSE) {
#function returns the maximum score for a dice throw
#if no roll is provided (roll.results) then a roll is randomly generated
#verbose argument prints out the score sheet
#roll 5 die if none are provided
if (is.null(roll.results)) {
roll.results <- sample(6, 5, replace = TRUE)
}
#sort results for ease of reading
roll.results <- sort(roll.results)
#grab the number of die per face
Ones <- roll.results[roll.results == 1]
Twos <- roll.results[roll.results == 2]
Threes <- roll.results[roll.results == 3]
Fours <- roll.results[roll.results == 4]
Fives <- roll.results[roll.results == 5]
Sixes <- roll.results[roll.results == 6]
#calculate frequency of each die
counts <- sapply(list(Ones, Twos, Threes, Fours, Fives, Sixes), length)
#find unique number of faces then check for kinds
face.sum <- sum(roll.results)
two.of.kind <-   any(counts == 2) #exactly two of a kind
three.of.kind <- any(counts == 3) * face.sum #exactly three of a kind
four.of.kind <-  any(counts == 4) * face.sum #exactly four of a kind
yahtzee <-       any(counts == 5) * 50 #exactly five of a kind
#full house
full.house <- (two.of.kind & (three.of.kind > 0)) * 25
#calculate if there is a small straight by checking if the die match either 1:4 or 2:5 or 3:6
straight4 <- (all(1:4 %in% roll.results) | all(2:5 %in% roll.results) | all(3:6 %in% roll.results)) * 30
#calculate if there is a large straight by checking if the die match 1:5 or 2:6
straight5 <- (all(1:5 %in% roll.results) | all(2:6 %in% roll.results))  * 40
#results
results <- tribble(
~ Result, ~ Score,
"Roll results", paste(roll.results, collapse = "-"),
"Ones", sum(Ones),
"Twos", sum(Twos),
"Threes", sum(Threes),
"Fours", sum(Fours),
"Fives", sum(Fives),
"Sixes", sum(Sixes),
"3 of a kind", three.of.kind,
"4 of a kind", four.of.kind,
"Full house", full.house,
"Small straight", straight4,
"Large straight", straight5,
"Chance", sum(roll.results),
"YAHTZEE", yahtzee
)
if (verbose) {print(results)}
last.roll <<- roll.results
best.result <- results[2:14, 2] %>% unlist() %>% as.integer() %>% max()
return(best.result)
}
mcreplicate <- function(n, expr, simplify = "array", ...) {
#function parallelizes replicate by imitating mclapply
#this is similar to how replicate imitates lapply
mclapply(integer(n), eval.parent(substitute(function(...) expr)),
simplify = simplify, mc.cores = cpu.cores)
}
seed.roll <-  c(1, 1, 1, 1, 1)
seed.roll <-  c(2, 2, 4, 5, 2)
# results <- lapply(0:5, function(die.to.keep) {
die.to.keep <- 3
#different combinations of the original die to keep and sort them
base.rolls <- combn(seed.roll, die.to.keep, simplify = FALSE) %>% lapply(., sort)
#remove duplicates
base.rolls <- base.rolls[!duplicated(base.rolls)]
#set up data then generate all possible permutations of the new roll
reps <- replicate(5 - die.to.keep, 1:6, simplify = FALSE)
new.perms <- expand.grid(reps) #generate all permutations of new die
#modify structure from DF to list
new.perms <- lapply(1:nrow(new.perms), function(x){new.perms[x,] %>% as.numeric()})
#combine the base.roll combinations with the new permutations to generate
#    all possible outcomes
if (die.to.keep > 0) {
new.rolls <- expand.grid(base.rolls, new.perms)
new.rolls <- lapply(1:nrow(new.rolls), function(x) {
new.rolls[x,] %>% unlist() %>% as.vector()
})
} else
new.rolls <- new.perms
new.rolls
base.rolls
max.scores <- mclapply(X = new.rolls,
FUN = calculate.score,
mc.cores = 4L) %>% unlist()
max.scores
rep(base.rolls, length.out = length(new.rolls))
new.rolls
rep(base.rolls, length.out = length(new.rolls))
unique(rep(base.rolls, length.out = length(new.rolls)))
base.rolls <- rep(base.rolls, length.out = length(new.rolls))
base.rolls <- lapply(base.rolls, function(x) {
paste(x, collapse = "-")
base.rolls <- rep(base.rolls, length.out = length(new.rolls))
base.rolls <- lapply(base.rolls, function(x) {
paste(x, collapse = "-")
}) %>% unlist() %>% enframe() %>% select(value)
base.rolls <- rep(base.rolls, length.out = length(new.rolls))
base.rolls <- lapply(base.rolls, function(x) {
paste(x, collapse = "-")
}) %>% unlist() %>% enframe() %>% select(value)
base.rolls
library(tidyverse)
library(combinat)
library(parallel)
# function to calculate score of a given roll --------------------------
calculate.score <- function(roll.results = NULL, verbose = FALSE) {
#function returns the maximum score for a dice throw
#if no roll is provided (roll.results) then a roll is randomly generated
#verbose argument prints out the score sheet
#roll 5 die if none are provided
if (is.null(roll.results)) {
roll.results <- sample(6, 5, replace = TRUE)
}
#sort results for ease of reading
roll.results <- sort(roll.results)
#grab the number of die per face
Ones <- roll.results[roll.results == 1]
Twos <- roll.results[roll.results == 2]
Threes <- roll.results[roll.results == 3]
Fours <- roll.results[roll.results == 4]
Fives <- roll.results[roll.results == 5]
Sixes <- roll.results[roll.results == 6]
#calculate frequency of each die
counts <- sapply(list(Ones, Twos, Threes, Fours, Fives, Sixes), length)
#find unique number of faces then check for kinds
face.sum <- sum(roll.results)
two.of.kind <-   any(counts == 2) #exactly two of a kind
three.of.kind <- any(counts == 3) * face.sum #exactly three of a kind
four.of.kind <-  any(counts == 4) * face.sum #exactly four of a kind
yahtzee <-       any(counts == 5) * 50 #exactly five of a kind
#full house
full.house <- (two.of.kind & (three.of.kind > 0)) * 25
#calculate if there is a small straight by checking if the die match either 1:4 or 2:5 or 3:6
straight4 <- (all(1:4 %in% roll.results) | all(2:5 %in% roll.results) | all(3:6 %in% roll.results)) * 30
#calculate if there is a large straight by checking if the die match 1:5 or 2:6
straight5 <- (all(1:5 %in% roll.results) | all(2:6 %in% roll.results))  * 40
#results
results <- tribble(
~ Result, ~ Score,
"Roll results", paste(roll.results, collapse = "-"),
"Ones", sum(Ones),
"Twos", sum(Twos),
"Threes", sum(Threes),
"Fours", sum(Fours),
"Fives", sum(Fives),
"Sixes", sum(Sixes),
"3 of a kind", three.of.kind,
"4 of a kind", four.of.kind,
"Full house", full.house,
"Small straight", straight4,
"Large straight", straight5,
"Chance", sum(roll.results),
"YAHTZEE", yahtzee
)
if (verbose) {print(results)}
last.roll <<- roll.results
best.result <- results[2:14, 2] %>% unlist() %>% as.integer() %>% max()
return(best.result)
}
mcreplicate <- function(n, expr, simplify = "array", ...) {
#function parallelizes replicate by imitating mclapply
#this is similar to how replicate imitates lapply
mclapply(integer(n), eval.parent(substitute(function(...) expr)),
simplify = simplify, mc.cores = cpu.cores)
}
seed.roll <-  c(1, 1, 1, 1, 1)
seed.roll <-  c(2, 2, 4, 5, 2)
# results <- lapply(0:5, function(die.to.keep) {
die.to.keep <- 3
#different combinations of the original die to keep and sort them
base.rolls <- combn(seed.roll, die.to.keep, simplify = FALSE) %>% lapply(., sort)
#remove duplicates
base.rolls <- base.rolls[!duplicated(base.rolls)]
#set up data then generate all possible permutations of the new roll
reps <- replicate(5 - die.to.keep, 1:6, simplify = FALSE)
new.perms <- expand.grid(reps) #generate all permutations of new die
#modify structure from DF to list
new.perms <- lapply(1:nrow(new.perms), function(x){new.perms[x,] %>% as.numeric()})
#combine the base.roll combinations with the new permutations to generate
#    all possible outcomes
if (die.to.keep > 0) {
new.rolls <- expand.grid(base.rolls, new.perms)
new.rolls <- lapply(1:nrow(new.rolls), function(x) {
new.rolls[x,] %>% unlist() %>% as.vector()
})
} else
new.rolls <- new.perms
#calculate the maximium scores for each possible roll
max.scores <- mclapply(X = new.rolls,
FUN = calculate.score,
mc.cores = 4L) %>% unlist()
base.rolls <- rep(base.rolls, length.out = length(new.rolls))
base.rolls <- lapply(base.rolls, function(x) {
paste(x, collapse = "-")
}) %>% unlist() %>% enframe() %>% select(value)
base.rolls
unique(base.rolls)
lapply(new.rolls, function(x) {paste(x, collapse = "-")}) %>% unlist() %>% enframe()
die.to.keep
new.rolls <- lapply(new.rolls, function(x) {paste(x, collapse = "-")}) %>% unlist() %>% enframe()
new.rolls$name <- die.to.keep #label the rows by how many die were kept
max.scores %>% enframe() %>% select(value)
max.scores <- max.scores %>% enframe() %>% select(value)
base.rolls
unique(base.rolls)
new.rolls
results <- bind_cols(base.rolls, new.rolls, max.scores)
names(results) <- c("Base_roll", "Die_to_keep", "Roll", "Max_score")
results <- results %>% select(Die_to_keep, Base_roll, Roll, Max_score)
results
results$Base_roll
unique(results$Base_roll)
replicate(3, 1:6)
colorspace::darken(RColorBrewer::brewer.pal(6, 'Spectral'))
colorspace::darken(RColorBrewer::brewer.pal(6, 'Spectral'), amount = 0.25)
rexp
rexp(10000, rate 10) %>% density() %>% plot()
rexp(10000, rate = 10) %>% density() %>% plot()
plot(density(rexp(10000, rate = 10)))
plot(density(rexp(10000, rate = 100)))
plot(density(rexp(10000, rate = 1)))
plot(density(rexp(10000, rate = 0.1)))
mean(rexp(10000, rate = 0.1))
mean(rexp(10000, rate = 0.01))
log(83,000) - log(50,000)
log(83000) - log(50000)
sample(c('correct', 'wrong', 'wrong', 'wrong'), size = 20, replace = TRUE)
sample(c('correct', 'wrong', 'wrong', 'wrong'), size = 20, replace = TRUE)
sample(c(1,0,0,0), size = 20, replace = TRUE)
sum(sample(c(1,0,0,0), size = 20, replace = TRUE))
sum(sample(c(1,0,0,0), size = 20, replace = TRUE))
sum(sample(c(1,0,0,0), size = 20, replace = TRUE))
sum(sample(c(1,0,0,0), size = 20, replace = TRUE))
sum(sample(c(1,0,0,0), size = 20, replace = TRUE))
sum(sample(c(1,0,0,0), size = 20, replace = TRUE))
replicate(sum(sample(c(1,0,0,0), size = 20, replace = TRUE)), 1000)
replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE)))
replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE)))
plot(density(replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE)))))
hist(replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE))))
hist(replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE)))/1000)
hist(replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE)//1000)))
hist(replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE))))
hist(replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE))))
hist(replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE))))
hist(replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE))))
hist(replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE))))
hist(replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE))))
replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE)))
runs <- replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE)))
prop.table(runs)
runs
table(runs) / 1000
table(runs)
runs <- replicate(1000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE)))
table(runs) / 1000
runs <- replicate(100000, sum(sample(c(1,0,0,0), size = 20, replace = TRUE)))
table(runs) / 100000
plot(table(runs) / 100000)
